
package com.revature.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.model.Offer;
import com.revature.util.ConnectionUtil;

public class OfferPostgres implements OfferDAO {

	@Override
	public Offer createOffer(Offer o) {
		String sql = "insert into offer (user_id,product_id, offer_date, offer_amount ) values (?,?,?,?) returning product_id, user_id ;";
		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setInt(1, o.getUser().getUser_id());
			ps.setInt(2, o.getProduct().getProduct_id());
			ps.setDate(3, Date.valueOf(o.getOffer_date()));
			ps.setDouble(4, o.getOffer_amount());

			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if (rs.next()) {
				o.getProduct().setProduct_id(rs.getInt("product_id"));
				o.getUser().setUser_id(rs.getInt("user_id"));
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return o;
	}

	@Override
	public Offer get(int userid) {
		String sql = "select * from offer where user_id = ?;";
		Offer offer = null;

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, userid); // this refers to the 1st ? in the sql String

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				offer = new Offer();
				offer.getProduct().setProduct_id(rs.getInt("product_id"));
				offer.getUser().setUser_id(rs.getInt("user_id"));
				offer.setOffer_date(rs.getDate("offer_date").toLocalDate());
				offer.setOffer_amount(rs.getInt("offer_amount"));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return offer;
	}

	@Override
	public List<Offer> getAll() {
		String sql = "select * from offer;";
		List<Offer> offers = new ArrayList<>();

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);

			while (rs.next()) {
				// extract each field from rs for each record, map them to a Offer object and
				// add them to the users arrayliost
				Offer o = new Offer();
				o.getProduct().setProduct_id(rs.getInt("product_id"));
				o.getUser().setUser_id(rs.getInt("user_id"));
				o.setOffer_date(rs.getDate("offer_date").toLocalDate());
				o.setOffer_amount(rs.getInt("offer_amount"));

				offers.add(o);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return offers;
	}

	@Override
	public boolean updateOffer(Offer o) {
		String sql = "update offer set offer_date = ?, offer_amount = ?   where user_id = ? and product_id=?;";
		int rowsChanged = -1;

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setDate(1, Date.valueOf(o.getOffer_date()));
			ps.setDouble(2, o.getOffer_amount());
			ps.setInt(3, o.getUser().getUser_id());
			ps.setInt(4, o.getProduct().getProduct_id());
			rowsChanged = ps.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteOffer(int userid) {
		String sql = "delete from offer where user_id = ?;";
		int rowsChanged = -1;
		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, userid);

			rowsChanged = ps.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

}
